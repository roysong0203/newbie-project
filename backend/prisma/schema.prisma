generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TF {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  description  String?        @db.Text
  createdAt    DateTime?      @default(now()) @db.DateTime(0)
  leaderId     String         @db.VarChar(64)
  Notification Notification[]
  User         User           @relation(fields: [leaderId], references: [id], onDelete: Cascade, map: "TF_ibfk_1")
  TFMember     TFMember[]

  @@index([leaderId], map: "leaderId")
}

model TFMember {
  id     Int    @id @default(autoincrement())
  userId String @db.VarChar(64)
  tfId   Int
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "TFMember_ibfk_1")
  TF     TF     @relation(fields: [tfId], references: [id], onDelete: Cascade, map: "TFMember_ibfk_2")

  @@unique([userId, tfId], map: "unique_user_tf")
  @@index([tfId], map: "tfId")
}

model User {
  id           String         @id @db.VarChar(100)
  name         String         @db.VarChar(100)
  username     String         @unique(map: "username") @db.VarChar(100)
  password     String         @db.VarChar(255)
  Notification Notification[]
  TF           TF[]
  TFMember     TFMember[]
}

model Notification {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  userId      String    @db.VarChar(100)
  tfId        Int
  isConfirmed Int       @default(0)
  TF          TF        @relation(fields: [tfId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Notification_tf_fk")
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Notification_user_fk")

  @@index([tfId], map: "idx_tfId")
  @@index([userId], map: "idx_userId")
}
